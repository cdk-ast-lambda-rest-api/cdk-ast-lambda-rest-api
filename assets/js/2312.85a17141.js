"use strict";(self.webpackChunkcalra_docs=self.webpackChunkcalra_docs||[]).push([[2312],{7561:(e,t,o)=>{o.d(t,{v:()=>s,e:()=>c});const n=Symbol("orama.insertions"),a=Symbol("orama.removals");var i;const r=(null===(i=globalThis.process)||void 0===i?void 0:i.emitWarning)??function(e,t){console.warn(`[WARNING] [${t.code}] ${e}`)};function s(e){"number"!=typeof e[n]&&(queueMicrotask((()=>{e[n]=void 0})),e[n]=0),e[n]>1e3?(r("Orama's insert operation is synchronous. Please avoid inserting a large number of document in a single operation in order not to block the main thread or, in alternative, please use insertMultiple.",{code:"ORAMA0001"}),e[n]=-1):e[n]>=0&&e[n]++}function c(e){"number"!=typeof e[a]&&(queueMicrotask((()=>{e[a]=void 0})),e[a]=0),e[a]>1e3?(r("Orama's remove operation is synchronous. Please avoid removing a large number of document in a single operation in order not to block the main thread, in alternative, please use updateMultiple.",{code:"ORAMA0002"}),e[a]=-1):e[a]>=0&&e[a]++}},2312:(e,t,o)=>{o.r(t),o.d(t,{innerInsertMultiple:()=>d,insert:()=>s,insertMultiple:()=>l});var n=o(3283),a=o(5341),i=o(7561),r=o(7025);async function s(e,t,o,s){const l=await e.validateSchema(t,e.schema);if(l)throw(0,r.$)("SCHEMA_VALIDATION_FAILURE",l);return async function(e,t,o,s){const{index:l,docs:d}=e.data,f=await e.getDocumentIndexId(t);if("string"!=typeof f)throw(0,r.$)("DOCUMENT_ID_MUST_BE_STRING",typeof f);if(!await e.documentsStore.store(d,f,t))throw(0,r.$)("DOCUMENT_ALREADY_EXISTS",f);const p=await e.documentsStore.count(d);s||await(0,a.VK)(e.beforeInsert,e,f,t);const m=await e.index.getSearchableProperties(l),w=await e.index.getSearchablePropertiesWithTypes(l),h=await e.getDocumentProperties(t,m);for(const[a,i]of Object.entries(h)){if(void 0===i)continue;const e=typeof i,t=w[a];if((!(0,n.isGeoPointType)(t)||"object"!=typeof i||"number"!=typeof i.lon||"number"!=typeof i.lat)&&!((0,n.isVectorType)(t)&&Array.isArray(i)||(0,n.isArrayType)(t)&&Array.isArray(i)||c.has(t)&&u.has(e)||e===t))throw(0,r.$)("INVALID_DOCUMENT_PROPERTY",a,t,e)}for(const n of m){var y,v,b,g;const t=h[n];if(void 0===t)continue;const a=w[n];await(null===(v=(y=e.index).beforeInsert)||void 0===v?void 0:v.call(y,e.data.index,n,f,t,a,o,e.tokenizer,p)),await e.index.insert(e.index,e.data.index,n,f,t,a,o,e.tokenizer,p),await(null===(g=(b=e.index).afterInsert)||void 0===g?void 0:g.call(b,e.data.index,n,f,t,a,o,e.tokenizer,p))}const A=await e.sorter.getSortableProperties(e.data.sorting),I=await e.sorter.getSortablePropertiesWithTypes(e.data.sorting),S=await e.getDocumentProperties(t,A);for(const n of A){const t=S[n];if(void 0===t)continue;const a=I[n];await e.sorter.insert(e.data.sorting,n,f,t,a,o)}s||await(0,a.VK)(e.afterInsert,e,f,t);return(0,i.v)(e),f}(e,t,o,s)}const c=new Set(["enum","enum[]"]),u=new Set(["string","number"]);async function l(e,t,o,n,i,s){i||await(0,a.F_)(e.beforeInsertMultiple,e,t);const c=t.length,u=e.schema;for(let a=0;a<c;a++){const o=await e.validateSchema(t[a],u);if(o)throw(0,r.$)("SCHEMA_VALIDATION_FAILURE",o)}return d(e,t,o,n,i,s)}async function d(e,t,o,n,i,r){o||(o=1e3),r??=0;const c=[];return await new Promise(((a,u)=>{let l=0;setTimeout((async function d(){const f=t.slice(l*o,++l*o);if(!f.length)return a();for(const t of f)try{const o=await s(e,t,n,i);c.push(o)}catch(p){u(p)}setTimeout(d,r)}),r)})),i||await(0,a.F_)(e.afterInsertMultiple,e,t),c}}}]);